module.exports = async options => {



  if ( options === undefined ) throw new Error( 'provide options to hrs' )

  const scheme = options.scheme !== undefined ? options.scheme : null
  if ( scheme === null ) throw new Error( 'provide scheme in options to hrs' )
  const host = options.host !== undefined ? options.host : null
  if ( host === null ) throw new Error( 'provide host in options to hrs' )
  const port = options.port !== undefined ? options.port : null
  const path = options.path !== undefined ? options.path : ''
  const method = options.method !== undefined ? options.method : null
  if ( method === null ) throw new Error( 'provide method in options to hrs' )
  const headers = options.headers !== undefined ? options.headers : {}
  const body = options.body !== undefined ? options.body : null
  const responseType = options.responseType !== undefined ? options.responseType : 'json'
  const responseHeaders = options.responseHeaders !== undefined ? options.responseHeaders : []
  const withCredentials = options.withCredentials || false


  
  return new Promise( ( resolve, reject ) => {
    
    try {

      if ( window !== 'undefined' && window.XMLHttpRequest ){
        
        const httpRequest = new XMLHttpRequest()

        httpRequest.withCredentials = withCredentials

        httpRequest.responseType = responseType
        httpRequest.open( method, `${ scheme }://${ host }${ port ? `:${ port }` : '' }/${ path.replace( /^\/|\/$/g, '' ) }/`, true )
        
        for ( const [ key, value ] of Object.entries( headers ) ){
          httpRequest.setRequestHeader( key, value )
        }
 
        

        httpRequest.onreadystatechange = () => {
          
          if( httpRequest.readyState === 4 && httpRequest.status === 200 ){
      
            // resolve( { body: httpRequest.response, status: httpRequest.status, statusText: httpRequest.statusText, responseType: httpRequest.responseType, responseHeaders: httpRequest.getAllResponseHeaders(), contentTypeResponseHeader: httpRequest.getResponseHeader( 'Content-Type' ) } )

            resolve( { body: httpRequest.response, statusCode: httpRequest.status, statusMessage: httpRequest.statusText, headers: httpRequest.getAllResponseHeaders(), httpRequest } )
          }
        }



        httpRequest.send( body )


      }
      
    } catch ( error ) {

      reject( error )
      
    }


  })




}