module.exports = async options => {



  if ( options === undefined ) throw new Error( 'provide options to hrs' )

  const scheme = options.scheme !== undefined ? options.scheme : null
  if ( scheme === null ) throw new Error( 'provide scheme in options to hrs' )
  const host = options.host !== undefined ? options.host : null
  if ( host === null ) throw new Error( 'provide host in options to hrs' )
  const port = options.port !== undefined ? options.port : null
  const path = options.path !== undefined ? options.path : ''
  const method = options.method !== undefined ? options.method : null
  if ( method === null ) throw new Error( 'provide method in options to hrs' )
  const headers = options.headers !== undefined ? options.headers : {}
  const body = options.body !== undefined ? options.body : ''
  const responseType = options.responseType !== undefined ? options.responseType : 'json'
  const responseHeaders = options.responseHeaders !== undefined ? options.responseHeaders : []
  

  return await makeRequest( { scheme: scheme, options: { hostname: host, port, path, method, body, headers } } )



  
}



const makeRequest = ( { scheme, options } ) => new Promise( ( resolve, reject ) => {



  let lib = null

  switch ( scheme ) {
    case 'http':
      lib = require( 'http' )
      break
    case 'https':
      lib = require( 'https' )
      break
  }


  const hr = lib.request( options, response => {

    let responseBody = ''
    response.on( 'data', data => {
      responseBody += data
    })

    response.on('end', () => {
      resolve( { body: JSON.parse( responseBody ), headers: response.headers, statusCode: response.statusCode, statusMessage: response.statusMessage } )
    })

  } ).on( 'error', error => {

    reject( error )

  } )


  hr.write( options.body )

  
  hr.end()




})